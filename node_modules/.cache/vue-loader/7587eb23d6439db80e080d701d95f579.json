{"remainingRequest":"/Users/Horpey/Documents/Horpey/Project/Web Project/LIPE-Todo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Horpey/Documents/Horpey/Project/Web Project/LIPE-Todo/src/views/Index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/Horpey/Documents/Horpey/Project/Web Project/LIPE-Todo/src/views/Index.vue","mtime":1588984387645},{"path":"/Users/Horpey/Documents/Horpey/Project/Web Project/LIPE-Todo/node_modules/cache-loader/dist/cjs.js","mtime":1586818197287},{"path":"/Users/Horpey/Documents/Horpey/Project/Web Project/LIPE-Todo/node_modules/babel-loader/lib/index.js","mtime":1586818188502},{"path":"/Users/Horpey/Documents/Horpey/Project/Web Project/LIPE-Todo/node_modules/cache-loader/dist/cjs.js","mtime":1586818197287},{"path":"/Users/Horpey/Documents/Horpey/Project/Web Project/LIPE-Todo/node_modules/vue-loader/lib/index.js","mtime":1588821266128}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  data() {\n    return {\n      test: \"Hello World\",\n      emptyState: false,\n      editID: \"\",\n      adding: false,\n      editting: false,\n      editted: \"\",\n      task: \"\",\n      todos: [\n        { text: \"todo 1\", done: false, id: Date.now() },\n        { text: \"todo 2\", done: true, id: Date.now() + 1 }\n      ]\n    };\n  },\n  methods: {\n    addTask() {\n      let text = this.task;\n      this.todos.push({ text, done: false, id: Date.now() });\n      this.task = \"\";\n    },\n    removeTodo(id) {\n      this.todos = this.todos.filter(todo => todo.id !== id);\n    },\n    editTask() {\n      //find the index of object from array that you want to update\n      const objIndex = this.todos.findIndex(obj => obj.id === this.editID);\n\n      // make new object of updated object.\n      const updatedObj = {\n        ...this.todos[objIndex],\n        text: this.editted,\n        id: Date.now()\n      };\n\n      // make final new array of objects by combining updated object.\n      this.todos = [\n        ...this.todos.slice(0, objIndex),\n        updatedObj,\n        ...this.todos.slice(objIndex + 1)\n      ];\n\n      this.editting = false;\n    },\n    editTodo(todo) {\n      this.editting = true;\n      this.adding = false;\n      this.editID = todo.id;\n      this.editted = todo.text;\n    },\n    oncheck(todo) {\n      todo.done = !todo.done;\n    },\n    getTime(time) {\n      var moment = require(\"moment\");\n      return moment(time).fromNow();\n    },\n    cancel() {\n      this.adding = false;\n      this.task = \"\";\n    },\n    cancelEdit() {\n      this.editting = false;\n      this.editted = \"\";\n    },\n    addTop() {\n      this.adding = true;\n      this.editting = false;\n      this.task = \"\";\n    },\n    doneProject() {\n      todos.filter(todo => {\n        return todo.done === true;\n      }).length;\n    }\n  }\n};\n",{"version":3,"sources":["Index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Index.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div>\n    <div class=\"container mt-5\">\n      <div class=\"row justify-content-center\">\n        <div class=\"col-md-5\">\n          <div class=\"appview\">\n              <p class=\"text-right small mb-2\">\n                  <a href=\"https://github.com/horpey\" target=\"_blank\">\n                  &copy; Horpey 2020</a>\n              </p>\n            <div class=\"card cardstyle\">\n              <div class=\"card-body mincard\">\n                <p class=\"taskk display-inline\">\n                  Tasks\n                  <span class=\"num\">{{todos.length}}</span>\n                </p>\n                <base-button\n                  @click=\"addTop()\"\n                  class=\"addbtn\"\n                  size=\"sm\"\n                  type=\"primary\"\n                  icon=\"fa fa-plus\"\n                ></base-button>\n                <hr class=\"my-1\" />\n                <div class=\"empty\" v-if=\"todos.length < 1\">\n                  <img src=\"/img/icons/empty.svg\" />\n                  <p class=\"small font-weight-bold text-dark\">No TODO added!</p>\n                </div>\n                <div v-if=\"todos\">\n                  <div\n                    class=\"card mt-3\"\n                    v-for=\"todo in todos.filter(todo => {return todo.done === false;})\"\n                    :key=\"todo.id\"\n                  >\n                    <div class=\"card-body px-2 py-3\">\n                      <div class=\"row\">\n                        <div class=\"col-7 ml-2\">\n                          <div class=\"custom-control custom-checkbox\">\n                            <input\n                              class=\"custom-control-input\"\n                              @click=\"oncheck(todo)\"\n                              :checked=\"todo.done\"\n                              :id=\"todo.id\"\n                              type=\"checkbox\"\n                            />\n                            <label\n                              :class=\"[{ 'striket': todo.done == true }, 'custom-control-label']\"\n                              :for=\"todo.id\"\n                            >{{todo.text}}</label>\n                          </div>\n                          <p class=\"my-0 pl-4\">\n                            <span class=\"badge badge-primary ctbadge\">{{getTime(todo.id)}}</span>\n                          </p>\n                        </div>\n                        <div class=\"col-4 pr-0\">\n                          <base-button\n                            @click=\"removeTodo(todo.id)\"\n                            class=\"addbtn mr-0\"\n                            size=\"sm\"\n                            type=\"danger\"\n                            icon=\"fa fa-trash\"\n                          ></base-button>\n                          <base-button\n                            @click=\"editTodo(todo)\"\n                            class=\"addbtn mr-1\"\n                            size=\"sm\"\n                            type=\"warning\"\n                            icon=\"fa fa-pencil\"\n                          ></base-button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div\n                    class=\"card mt-3\"\n                    v-for=\"todo in todos.filter(todo => {return todo.done === true;})\"\n                    :key=\"todo.id\"\n                  >\n                    <div class=\"card-body px-2 py-3\">\n                      <div class=\"row\">\n                        <div class=\"col-7 ml-2\">\n                          <div class=\"custom-control custom-checkbox\">\n                            <input\n                              class=\"custom-control-input\"\n                              @click=\"oncheck(todo)\"\n                              :checked=\"todo.done\"\n                              :id=\"todo.id\"\n                              type=\"checkbox\"\n                            />\n                            <label\n                              :class=\"[{ 'striket': todo.done == true }, 'custom-control-label']\"\n                              :for=\"todo.id\"\n                            >{{todo.text}}</label>\n                          </div>\n                          <p class=\"my-0 pl-4\">\n                            <span class=\"badge badge-primary ctbadge\">{{getTime(todo.id)}}</span>\n                          </p>\n                        </div>\n                        <div class=\"col-4 pr-0\">\n                          <base-button\n                            @click=\"removeTodo(todo.id)\"\n                            class=\"addbtn mr-0\"\n                            size=\"sm\"\n                            type=\"danger\"\n                            icon=\"fa fa-trash\"\n                          ></base-button>\n                          <base-button\n                            @click=\"editTodo(todo)\"\n                            class=\"addbtn mr-1\"\n                            size=\"sm\"\n                            type=\"warning\"\n                            icon=\"fa fa-pencil\"\n                          ></base-button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"card addcard mt-3\">\n              <div class=\"card-body\">\n                <div v-if=\"(!adding && !editting)\">\n                  <a\n                    href=\"javascript:void()\"\n                    @click=\"(adding = true)\"\n                    class=\"addTask font-weight-bold\"\n                  >\n                    <span class=\"fa fa-plus pr-3\"></span>Add Task\n                  </a>\n                </div>\n                <div v-if=\"adding\">\n                  <form @submit.prevent=\"addTask\">\n                    <input class=\"form-control mb-2\" required v-model=\"task\" />\n                    <div class=\"text-right small\">\n                      <a\n                        href=\"javascript:void()\"\n                        @click=\"cancel()\"\n                        class=\"btn btn-sm btn-secondary mr-2 text-capitalize\"\n                      >Cancel</a>\n                      <button type=\"submit\" class=\"btn btn-sm btn-primary text-capitalize\">Add Task</button>\n                    </div>\n                  </form>\n                </div>\n\n                <div v-if=\"editting\">\n                  <form @submit.prevent=\"editTask\">\n                    <input class=\"form-control mb-2\" required v-model=\"editted\" />\n                    <div class=\"text-right small\">\n                      <a\n                        href=\"javascript:void()\"\n                        @click=\"cancelEdit()\"\n                        class=\"btn btn-sm btn-secondary mr-2 text-capitalize\"\n                      >Cancel</a>\n                      <button type=\"submit\" class=\"btn btn-sm btn-primary text-capitalize\">Edit Task</button>\n                    </div>\n                  </form>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nexport default {\n  data() {\n    return {\n      test: \"Hello World\",\n      emptyState: false,\n      editID: \"\",\n      adding: false,\n      editting: false,\n      editted: \"\",\n      task: \"\",\n      todos: [\n        { text: \"todo 1\", done: false, id: Date.now() },\n        { text: \"todo 2\", done: true, id: Date.now() + 1 }\n      ]\n    };\n  },\n  methods: {\n    addTask() {\n      let text = this.task;\n      this.todos.push({ text, done: false, id: Date.now() });\n      this.task = \"\";\n    },\n    removeTodo(id) {\n      this.todos = this.todos.filter(todo => todo.id !== id);\n    },\n    editTask() {\n      //find the index of object from array that you want to update\n      const objIndex = this.todos.findIndex(obj => obj.id === this.editID);\n\n      // make new object of updated object.\n      const updatedObj = {\n        ...this.todos[objIndex],\n        text: this.editted,\n        id: Date.now()\n      };\n\n      // make final new array of objects by combining updated object.\n      this.todos = [\n        ...this.todos.slice(0, objIndex),\n        updatedObj,\n        ...this.todos.slice(objIndex + 1)\n      ];\n\n      this.editting = false;\n    },\n    editTodo(todo) {\n      this.editting = true;\n      this.adding = false;\n      this.editID = todo.id;\n      this.editted = todo.text;\n    },\n    oncheck(todo) {\n      todo.done = !todo.done;\n    },\n    getTime(time) {\n      var moment = require(\"moment\");\n      return moment(time).fromNow();\n    },\n    cancel() {\n      this.adding = false;\n      this.task = \"\";\n    },\n    cancelEdit() {\n      this.editting = false;\n      this.editted = \"\";\n    },\n    addTop() {\n      this.adding = true;\n      this.editting = false;\n      this.task = \"\";\n    },\n    doneProject() {\n      todos.filter(todo => {\n        return todo.done === true;\n      }).length;\n    }\n  }\n};\n</script>\n<style lang=\"scss\" scoped>\nbody {\n  background: #f6f9fb !important;\n}\n.taskk {\n  font-weight: bold;\n}\n.appview {\n  min-height: 90vh;\n  .cardstyle {\n    box-shadow: 0 1px 2px 0 rgba(51, 132, 193, 0.302),\n      0 1px 3px 1px rgba(12, 93, 154, 0.149);\n    border: 0px;\n    min-height: 357px;\n  }\n  .taskk {\n    position: relative;\n    display: inline-block;\n    .num {\n      font-weight: normal;\n      font-size: 13px;\n      margin-left: 4px;\n      position: absolute;\n    }\n  }\n  .addbtn {\n    float: right;\n  }\n  .empty {\n    text-align: center;\n    padding: 70px 0px;\n    opacity: 0.3;\n    img {\n      height: 80px;\n    }\n  }\n  .f-14 {\n    font-size: 14px;\n    font-weight: normal;\n  }\n  .display-inline {\n    display: inline-block;\n  }\n  .ctbadge {\n    font-size: 9px;\n    text-transform: lowercase;\n    margin-left: 3px;\n  }\n  .addcard {\n    box-shadow: 0 1px 2px 0 rgba(51, 132, 193, 0.302),\n      0 1px 3px 1px rgba(12, 93, 154, 0.149);\n    border: 0px;\n  }\n  .striket {\n    text-decoration: line-through;\n  }\n}\n.mincard {\n  height: 470px;\n  overflow-y: scroll;\n}\n@media only screen and (max-width: 768px) {\n  .mincard {\n    height: 590px;\n    overflow-y: scroll;\n  }\n}\n</style>\n"]}]}